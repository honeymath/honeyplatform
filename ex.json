[{"code":"# This exercise code is generated by GPT. With following Prompt:\n\n# Problem Statements:\n# Given the following two homogeneous linear equations:\n# Print each equation in LaTeX format for the student to solve.\n# Please find a basis for the subspace defined by these equations.\n#\n# User Input:\n# Read the student's input, expecting a list of basis vectors.\n# Convert the input to sympy matrices.\n#\n# Validation:\n# Construct the coefficient matrix for the system of equations.\n# Check the rank of the coefficient matrix.\n# Check the number of basis vectors provided by the student.\n# Verify if the number of basis vectors is correct.\n# Combine the basis vectors into a matrix and check if they are linearly independent.\n# Verify each basis vector to ensure it is a valid basis vector for the null space.\n#\n# Feedback:\n# If the number of basis vectors is incorrect, raise an exception with an appropriate message.\n# If any basis vector is not valid, raise an exception with an appropriate message.\n# If all checks pass, print a confirmation message that the student's suggested basis is correct.\n#\n# Cautions:\n# Always include necessary packages: import json, random, from sympy import Matrix, symbols, Eq, latex.\n# Ensure to use \"$$ {latex(...)} $$\" for MathJax to correctly display mathematical expressions.\n\nimport json\nimport random\nfrom sympy import Matrix, symbols, Eq, latex\n\n# Number of variables\nn = 4\n\n# Define variables\nx = symbols('x1 x2 x3 x4')\n\n# Random coefficients for two homogeneous linear equations\ncoeffs = [[random.randint(-5, 5) for _ in range(n)] for _ in range(2)]\n\n# Create equations\nequations = [Eq(sum(coeffs[i][j] * x[j] for j in range(n)), 0) for i in range(2)]\n\n# Print the problem statement\nprint(\"Given the following two homogeneous linear equations:\")\nfor eq in equations:\n    print(f\"$$ {latex(eq)} $$\")\nprint(\"Please find a basis for the subspace defined by these equations.\")\n\n# Read the student's input (expecting a list of basis vectors)\nX = json.loads(input()) #matrix\n\n# Convert the input to sympy matrices\nbasis_vectors = [Matrix(v) for v in X]\n\n# Construct the coefficient matrix for the system of equations\ncoeff_matrix = Matrix(coeffs)\n\n# Check the rank of the coefficient matrix\nrank_coeff_matrix = coeff_matrix.rank()\n\n# Check the number of basis vectors provided by the student\nnum_basis_vectors = len(basis_vectors)\n\n# Verify if the number of basis vectors is correct\nif rank_coeff_matrix + num_basis_vectors != n:\n    raise Exception(f\"Your answer is incorrect. The number of basis vectors should be {n - rank_coeff_matrix}.\")\n\n# Combine the basis vectors into a matrix\nbasis_matrix = Matrix.hstack(*basis_vectors)\n\n# Check if the basis vectors are linearly independent\nif basis_matrix.rank() != num_basis_vectors:\n    raise Exception(\"The provided vectors are not linearly independent and thus do not form a basis.\")\n\n# Verify each basis vector\nfor vec in basis_vectors:\n    if vec.rows != n or vec.cols != 1:\n        raise Exception(f\"Each basis vector must be a column vector of size {n}.\")\n    if coeff_matrix * vec != Matrix([0, 0]):\n        raise Exception(f\"The vector $$ {latex(vec)} $$ is not in the null space of the coefficient matrix.\")\n\nprint(\"Your suggested basis is correct.\")\n\n","inputs":[],"seed":104780913},{"code":"# This exercise code is generated by GPT. With the following prompt:\n\n# Problem Statements:\n# Given a 3x3 matrix, ask the student to come up with an eigenvalue and an eigenvector of that eigenvalue.\n# Ensure the eigenvector is non-zero (rank 1).\n#\n# User Input:\n# The first input should be an integer representing the eigenvalue.\n# The second input should be a matrix representing the eigenvector.\n#\n# Validation:\n# Ensure the first input is an integer (the eigenvalue).\n# Ensure the second input is a matrix (the eigenvector).\n# Verify that the provided eigenvector is non-zero and has the correct dimensions (3x1).\n# Verify that the provided eigenvalue is actually an eigenvalue of the given matrix.\n# Check if the provided eigenvalue and eigenvector satisfy the eigenvalue equation for the given matrix.\n#\n# Feedback:\n# If the first input is not an integer, raise an exception with an appropriate message.\n# If the second input is not a matrix, raise an exception with an appropriate message.\n# If the eigenvector is not non-zero or does not have the correct dimensions, raise an exception with an appropriate message.\n# If the provided eigenvalue is not an eigenvalue of the matrix, raise an exception with an appropriate message.\n# If the provided eigenvalue and eigenvector do not satisfy the eigenvalue equation, raise an exception with an appropriate message.\n# If the eigenvalue is correct, print a confirmation message.\n# If all checks pass, print a confirmation message that the student's eigenvalue and eigenvector are correct.\n#\n# Cautions:\n# Always include necessary packages: import json, random, from sympy import Matrix, eye, diag, latex.\n# Ensure to use \"$$ {latex(...)} $$\" for MathJax to correctly display mathematical expressions.\n# Use double braces {{...}} to avoid conflicts with Python's string formatting.\n\nimport json\nimport random\nfrom sympy import Matrix, eye, diag, latex\n\n# Define the size of the matrix\nn = 3\n\n# Generate a random integer invertible matrix P with determinant 1\nscale = 4  # Scale of randomness\nupper = [[1 if i == j else 0 if i < j else int(random.random() * scale) for j in range(n)] for i in range(n)]\nlower = [[1 if i == j else 0 if i > j else int(random.random() * scale) for j in range(n)] for i in range(n)]\nswitch = list(range(n))\nrandom.shuffle(switch)\nsw = eye(n)[switch, :]\nup = Matrix(upper)\nlo = Matrix(lower)\nP = sw * up * lo\n\n# Generate a diagonal matrix with integer eigenvalues\neigenvalues = [random.randint(1, 10) for _ in range(n)]\nLambda = diag(*eigenvalues)\n\n# Create the matrix A with integer eigenvalues\nA = P.inv() * Lambda * P\n\n# Print the problem statement\nprint(\"Given the following 3x3 matrix:\")\nprint(f\"$$A = {latex(A)}$$\")\nprint(\"Please come up with an eigenvalue and an eigenvector of that eigenvalue.\")\n\n# First input: Eigenvalue\neigenvalue = int(input())\n\n# Process the eigenvalue input\nif not isinstance(eigenvalue, int):\n    raise Exception(\"The eigenvalue must be an integer.\")\n\n# Verify that the provided eigenvalue is actually an eigenvalue of the given matrix\nif eigenvalue not in eigenvalues:\n    raise Exception(\"The provided eigenvalue is not an eigenvalue of the matrix.\")\n\nprint(f\"You suggested one eigenvalue is {eigenvalue}, that's correct. Now please find an eigenvector for this eigenvalue.\")\n\n# Second input: Eigenvector\nX = json.loads(input()) #matrix\n\n# Check that there is exactly one vector provided\nif len(X) != 1:\n    raise Exception(f\"You should enter exactly one matrix, but {len(X)} many matrices are detected\")\n\n# Convert the input to a sympy matrix\neigenvector = Matrix(X[0])\n\n# Verify that the eigenvector is non-zero and has the correct dimensions (3x1)\nif eigenvector.rows != 3 or eigenvector.cols != 1:\n    raise Exception(\"The eigenvector must be a non-zero column vector of size 3x1.\")\nif eigenvector.rank() == 0:\n    raise Exception(\"The eigenvector must be non-zero.\")\n\n# Check if the provided eigenvalue and eigenvector satisfy the eigenvalue equation\nif not A * eigenvector == eigenvalue * eigenvector:\n    raise Exception(\"The provided eigenvalue and eigenvector do not satisfy the eigenvalue equation.\")\n\nprint(\"Your suggested eigenvalue and eigenvector are correct.\")\n\n","inputs":[],"seed":56465529},{"code":"\n\nimport random\nfrom sympy import Matrix, latex, eye\nimport json\n\n\nscale = 4 # scale of randomness of the matrix entry\nn = 3 # The size of the matrix.\n\n## The following code generates an upper triangular matrix\nupper = [[1 if i == j else 0 if i < j else int(random.random()*scale) for j in range(n)] for i in range(n)]\n\n## The following code generates an lower triangular matrix\nlower = [[1 if i == j else 0 if i > j else int(random.random()*scale) for j in range(n)] for i in range(n)]\n\n## The following code, using fisher's shuffle algorithm, generates a partition of [0,...,n-1]\nswitch = list(range(n))\nfor i in range(n):\n    k = int(random.random()*(n-i))\n    switch[i],switch[k] = switch[k],switch[i]\n\n    \n## The following code generates a switching matrix\nswi = [[1 if i == switch[j] else 0 for i in range(n)]for j in range(n)]\n  \n\n## Pack the above into matrices that can be processed by sympy\nup = Matrix(upper)\nlo = Matrix(lower)\nsw = Matrix(swi)\n\n## The following code generates a random vector\n\ntheb = [[int(random.random()*scale)] for i in range(n)]\n\nb = Matrix(theb)\n\n## The following matrix is going to give the student as content of exercise\n\ngivenMatrix = sw*up*lo\n\nvariables = ['x','y','z','u','v','w','s','t','r','p','q']\ncols = len(givenMatrix.tolist()[0])\n\nprint(\"Solve the following equations\")\n\nif cols <= len(variables):\n  variable_matrix = Matrix([[i] for i in variables[:cols]])\nelse:\n  variable_matrix = Matrix([[f\"x_{i}\"] for i in range(cols)])\n\nequations = givenMatrix*variable_matrix\n\nequationList = equations.tolist()\n\nfor i in range(n):\n  print(f\"$${latex(equationList[i][0])} = {theb[i][0]}$$\")\n\nprint(rf\"Please give a matrix M such that $${latex(variable_matrix)} = M$$ is a solution\")\n\n\nX = json.loads(input())#matrix\n\nif len(X)!=1:\n  raise Exception(f\"You should enter exactly one matrix, but {len(X)} many matrices are detected\")\n  \nif len(X[0])!= n:## check the number of cols\n  raise Exception(f\"Your matrix must have {n} rows, but now your matrix have {len(X[0])} rows\")\n\nif len(X[0][0])!= 1:\n  raise Exception(f\"Your matrix must have 1 cols, but now your matrix have {len(X[0][0])} columns\")\n  \nuserInput =Matrix( X[0])\nprint(rf\"By what you have entered, you mean $$M={latex(userInput)}$$\")\n\nverifyb = givenMatrix * userInput\n\n\n\nif verifyb == b:\n  print(rf\"Let us verify your solution is correct. Indeed $${latex(givenMatrix)}\\times {latex(userInput)} = {latex(verifyb)},$$ which means your answer is a solution\")\nelse:\n  raise Exception(rf\"However, I have calculated $${latex(givenMatrix)}\\times {latex(userInput)} = {latex(verifyb)}$$\")\n\n\n\n","inputs":[],"seed":100184816}]
